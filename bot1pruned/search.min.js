import {BCAbstractRobot, SPECS} from 'battlecode';import qmath from 'math.js';function circle(t,e,r,n){for(var i=[],u=bfsDeltas[n],a=u.length,o=0;o<a;o++){var s=e+u[o][0],f=r+u[o][1];inArr(s,f,t.map)&&i.push([s,f])}return i}function emptyPos(t,e,r,n,i=true){if(inArr(t,e,r))if(!1===i){if(r[e][t]<=0&&!0===n[e][t])return!0}else if(0===r[e][t]&&!0===n[e][t])return!0;return!1}function canPass(t,e,r){var n=t.getPassableMap();return!!inArr(e,r,n)&&n[r][e]}function fuelDeposit(t,e,r){return t.getFuelMap()[r][e]}function karboniteDeposit(t,e,r){return t.getKarboniteMap()[r][e]}function inArr(t,e,r){return!(t<0||e<0||t>=r[0].length||e>=r.length)}function findNearestStructure(t){for(var e=t.getVisibleRobots(),r=1e7,n=null,i=0;i<t.knownStructures[t.me.team].length;i++){var u=t.knownStructures[t.me.team][i];(o=qmath.dist(t.me.x,t.me.y,u.x,u.y))<r&&(r=o,n=u)}for(i=0;i<e.length;i++){var a=e[i];if((a.unit===SPECS.CHURCH||a.unit===SPECS.CASTLE)&&a.team===t.me.team){var o;(o=qmath.dist(t.me.x,t.me.y,a.x,a.y))<r&&(r=o,n={x:a.x,y:a.y,unit:a.unit})}}return null!==n&&n}function findNearestStructureHere(t,e,r,n){var i;i=n||t.getVisibleRobots();for(var u=1e7,a=null,o=0;o<t.knownStructures[t.me.team].length;o++){var s=t.knownStructures[t.me.team][o];(m=qmath.dist(e,r,s.x,s.y))<u&&(u=m,a=s)}for(o=0;o<i.length;o++){var f=i[o];if((f.unit===SPECS.CHURCH||f.unit===SPECS.CASTLE)&&f.team===t.me.team){var m;(m=qmath.dist(e,r,f.x,f.y))<u&&(u=m,a={x:f.x,y:f.y,unit:f.unit})}}return null!==a&&a}function findNearestEnemy(t,e){for(var r=99999999,n=null,i=t.getVisibleRobots(),u=0;u<i.length;u++){var a=i[u];if(a.team!==t.me.team){var o=qmath.dist(t.me.x,t.me.y,a.x,a.y);o<r&&(r=o,!0,n=a)}}return n}function unitsInRadius(t,e,r=t.me.team,n=t.me.x,i=t.me.y){for(var u=t.getVisibleRobots(),a={0:[],1:[],2:[],3:[],4:[],5:[]},o=0;o<u.length;o++){var s=u[o];if(s.team===r){qmath.dist(n,i,s.x,s.y)<=e&&a[s.unit].push(s)}}return a}function horizontalSymmetry(t){for(var e=0;e<4;e++)for(var r=0;r<t[e].length;r++)if(t[e][r]!==t[t.length-e-1][r])return!1;return!0}var bfsDeltas={0:[[0,0]],1:[[0,0],[0,-1],[1,0],[0,1],[-1,0]],2:[[0,0],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],3:[[0,0],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],4:[[0,0],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-2],[2,0],[0,2],[-2,0]]};export default {circle, bfsDeltas, emptyPos, canPass, fuelDeposit, karboniteDeposit, findNearestStructure, horizontalSymmetry, inArr, unitsInRadius, findNearestStructureHere};